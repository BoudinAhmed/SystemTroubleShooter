<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--For buttons grey and round edges-->
    <Style x:Key="ButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Background" Value="#3c3c3c"/>
        <Setter Property="Foreground" Value="#dddddd"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#555555"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#252525"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

     
    <!--Dashboard Style -->
    <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="Background" Value="#2a2a2a"/>
        <Setter Property="Foreground" Value="#dddddd"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#444444"/>
        <Setter Property="VerticalGridLinesBrush" Value="#444444"/>
        <Setter Property="RowBackground" Value="#2a2a2a"/>
        <Setter Property="AlternatingRowBackground" Value="#303030"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
    </Style>
    <Style TargetType="DataGridColumnHeader" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
        <Setter Property="Background" Value="#3a3a3a"/>
        <Setter Property="Foreground" Value="#eeeeee"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>
    <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#007ACC"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--For each issue item border-->
    <Style x:Key="IssueItemStyle" TargetType="Border">
        <Setter Property="Padding" Value="20,0,0,0" />
        <Setter Property="Height" Value="70" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Background" Value="#2b2b2b" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#2d2d2d" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
   <!--title bar elements-->
   <Style x:Key="TitleBarButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#dddddd"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Width" Value="40"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#444444"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#555555"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
    </Style>
         
   <!--Close button on title bar-->
   <Style x:Key="TitleBarCloseButtonStyle" TargetType="Button" BasedOn="{StaticResource TitleBarButtonStyle}">
            <Setter Property="Foreground" Value="#eee"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#e53935"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#d32f2f"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
    </Style>

    
   <!--Sidepanel elements-->
    <Style x:Key="SideBarButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#dddddd"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="55"/>
        <Setter Property="Height" Value="55"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#3c3c3c"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#444444"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.SelectedView, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="SystemOverview"/>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="SystemOverview"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="#505050"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.SelectedView, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Home"/>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Home"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="#505050"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.SelectedView, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Settings"/>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Settings"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="#505050"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.SelectedView, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="About"/>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="About"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="#505050"/>
                        </MultiDataTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Scrollbar style-->
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Track x:Name="PART_Track" Orientation="{TemplateBinding Orientation}" IsDirectionReversed="True">
                            <Track.Thumb>
                                <Thumb x:Name="PART_Thumb" Focusable="False">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Border Background="DarkGray" CornerRadius="2">
                                                <Border.Width>
                                                    <Binding Path="ViewportSize" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Track}}"/>
                                                </Border.Width>
                                                <Border.Height>
                                                    <Binding Path="ViewportSize" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Track}}"/>
                                                </Border.Height>
                                            </Border>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="False"/>
                            <Setter TargetName="PART_Thumb" Property="Width">
                                <Setter.Value>
                                    <Binding Path="ViewportSize" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Track}}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Thumb" Property="Height" Value="8"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_Thumb" Property="Height">
                                <Setter.Value>
                                    <Binding Path="ViewportSize" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Track}}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Thumb" Property="Width" Value="8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>